import java.util.Deque;
import java.util.LinkedList;

public class SlidingWindow {

	static void printMax(int arr[], int k) {

		int n = arr.length;
		Deque<Integer> q = new LinkedList<>();
		if (k > arr.length)
			return;

		for (int i = 0; i < k; i++) {
			checkRear(arr, i, q);
			q.addLast(i);// push the index
		}
		System.out.print(arr[q.peekFirst()] + "\t");

		for (int j = k; j < arr.length ; j++) {

			// remove stale elements i.e those elements which do not belong to the current
			// window
			if (q.peekFirst() <= j - k)
				q.removeFirst();
			checkRear(arr, j, q);
			q.addLast(j);// push the index (only then we will know in next iteration if it belongs to the
						// window)
			System.out.print(arr[q.peekFirst()] + "\t");
		}

	}

	public static void checkRear(int[] arr, int index , Deque<Integer> q) {

		while (!q.isEmpty() && arr[q.peekLast()] <= arr[index]) {
			q.removeLast();
		}
	}

	public static void main(String[] args) {
		//int arr[] = { 12, 1, 78, 90, 57, 89, 56 };
		//int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; 
		int arr[] = {8, 5, 10, 7, 9, 4, 15, 12, 90, 13};
		int k = 3;
		printMax(arr, 10);
	}

}
